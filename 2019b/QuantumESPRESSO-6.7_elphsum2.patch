diff -ru qe-6.7/PHonon/PH/do_phonon.f90 qe-6.7-elphsum2/PHonon/PH/do_phonon.f90
--- qe-6.7/PHonon/PH/do_phonon.f90.orig	2020-11-30 20:57:09.000000000 +0800
+++ qe-6.7/PHonon/PH/do_phonon.f90	2021-04-19 12:28:21.216935510 +0800
@@ -123,25 +123,25 @@
            !
         END IF
         !
-        IF ( elph_mat ) THEN
-           CALL elphsum_wannier(iq)
-        ELSEIF( elph_simple ) THEN
-           CALL elphsum_simple()
-        ELSEIF( elph_epa ) THEN
-           CALL elphfil_epa(iq)
-        ELSEIF( elph_yambo ) THEN
-           CALL elph_yambo_eval_and_IO()
-        ELSEIF(elph_tetra == 1) THEN
-           CALL elph_tetra_lambda()
-        ELSEIF(elph_tetra == 2) THEN
-           CALL elph_tetra_gamma()
-        ELSEIF(elph_tetra == 3) THEN
-           CALL elph_scdft()
-        ELSEIF( elph_ahc ) THEN
-           CALL elph_do_ahc()
-        ELSE 
-           CALL elphsum()
-        END IF
+        !IF ( elph_mat ) THEN
+        !   CALL elphsum_wannier(iq)
+        !ELSEIF( elph_simple ) THEN
+        !   CALL elphsum_simple()
+        !ELSEIF( elph_epa ) THEN
+        !   CALL elphfil_epa(iq)
+        !ELSEIF( elph_yambo ) THEN
+        !   CALL elph_yambo_eval_and_IO()
+        !ELSEIF(elph_tetra == 1) THEN
+        !   CALL elph_tetra_lambda()
+        !ELSEIF(elph_tetra == 2) THEN
+        !   CALL elph_tetra_gamma()
+        !ELSEIF(elph_tetra == 3) THEN
+        !   CALL elph_scdft()
+        !ELSEIF( elph_ahc ) THEN
+        !   CALL elph_do_ahc()
+        !ELSE 
+        CALL elphsum2()
+        !END IF
         !
      END IF
      !
diff -ru qe-6.7/PHonon/PH/elphon.f90 qe-6.7-elphsum2/PHonon/PH/elphon.f90
--- qe-6.7/PHonon/PH/elphon.f90.orig	2020-11-30 20:57:09.000000000 +0800
+++ qe-6.7/PHonon/PH/elphon.f90	2021-04-19 12:28:21.252935194 +0800
@@ -1139,6 +1139,233 @@
   RETURN
 END SUBROUTINE elphsum
 
+!
+!
+!-----------------------------------------------------------------------
+subroutine elphsum2
+  !-----------------------------------------------------------------------
+  !
+  !      Sum over BZ of the electron-phonon matrix elements el_ph_mat
+  !      Original routine written by Francesco Mauri
+  !      Routine to symmetrize and print gkk (C. Verdi and S. Ponce)
+  !
+!#include "f_defs.h"
+  USE ions_base, ONLY : nat, ntyp => nsp, ityp, tau
+  USE cell_base,   ONLY : at, bg
+  use pwcom
+  USE symm_base, ONLY : s, irt, nsym, invs
+  USE kinds, only : DP
+  use klist, only : xk
+  use phcom
+  use el_phon
+  USE lr_symm_base, ONLY : rtau, nsymq, irotmq, minus_q
+  USE io_global, ONLY : stdout
+  USE control_lr, ONLY: lgamma
+  USE qpoint, ONLY : xq
+  USE modes,      ONLY : u, nmodes
+  !
+  implicit none
+  integer :: n, ik, ikk, ikq, pbnd, ibnd, jbnd, ipert, jpert, nu, mu, vu
+  complex(kind=DP) :: el_ph_sum (3*nat,3*nat)
+  real(kind=DP) :: g2, gamma, w, epc(nbnd,nbnd,3*nat), w_1, w_2, epc_sym(nbnd,nbnd,3*nat)
+  real(kind=DP), parameter :: ryd2ev = 13.6058, ryd2mev = 13605.8, eps = 0.01/ryd2mev
+  !
+  ! now read the eigenvalues and eigenvectors of the dynamical matrix
+  ! (already done in elphon subr)
+  !call readmat (iudyn, ibrav, celldm, nat, ntyp, ityp, omega, amass, tau, xq,
+  !w2, dyn)
+  !
+  write(6,*) 
+  write(6,*) 'We here write only the matrix elements for k=Gamma in the first proc:'
+  write(6,*) 
+  !
+  ! consider only initial state k=0
+  ik = 1
+  WRITE(6,'(a,3f10.6)') 'xk ', (xk(n,ik),n=1,3)
+  write(6,*) ' ibnd  jbnd  imode   eig_i (eV)    eig_j (eV)   omega_nu (meV)    |g| (meV)'
+  !
+  !
+  if (lgamma) then
+     ikk = ik
+     ikq = ik
+  else
+     ikk = 2 * ik - 1
+     ikq = ikk + 1
+  endif
+  !
+  do ibnd = 1, nbnd
+     do jbnd = 1, nbnd
+        !
+        do jpert = 1, 3 * nat
+           do ipert = 1, 3 * nat
+              el_ph_sum (ipert, jpert) = conjg (el_ph_mat (jbnd, ibnd, ik,ipert) ) * &
+                                         el_ph_mat (jbnd, ibnd, ik, jpert)
+           enddo
+        enddo
+        !
+        ! from pert to cart
+        !
+        call symdyn_munu2    (el_ph_sum, u, xq, s, invs, rtau, irt, at, &
+           bg, nsymq, nat, irotmq, minus_q)
+        !
+        do nu = 1, nmodes
+          gamma = 0.0
+          do mu = 1, 3 * nat
+           do vu = 1, 3 * nat
+               gamma = gamma + real (conjg (dyn (mu, nu) ) * el_ph_sum (mu,vu) &
+                 * dyn (vu, nu) )
+           enddo
+          enddo
+          gamma = gamma / 2.d0
+          !
+          ! the factor 2 comes from the factor sqrt(hbar/2/M/omega) that
+          ! appears
+          ! in the definition of the electron-phonon matrix element g
+          ! The sqrt(1/M) factor is actually hidden into the normal modes
+          ! we still need to divide by the phonon frequency in Ry
+          !
+          if (w2(nu).gt.0.d0) then
+            w = sqrt(w2(nu))
+            gamma = gamma / w
+          else
+            w = sqrt(-w2(nu))
+            gamma = 0.d0
+          endif
+          !
+          if (gamma.lt.0.d0) gamma = 0.d0
+          gamma = sqrt(gamma)
+          !
+          ! gamma = |g| [Ry]
+          !
+          epc(ibnd,jbnd,nu) = gamma
+          !
+        enddo
+        !
+     enddo
+  enddo
+  !
+  !  HERE WE "SYMMETRIZE": actually we simply take the averages over
+  !  degenerate states, it is only a convention because g is gauge-dependent!
+  !
+  ! first the phonons 
+  !
+  do ibnd = 1, nbnd
+  do jbnd = 1, nbnd
+    !
+    do nu = 1, nmodes
+      !
+      w_1 = sqrt(abs(w2(nu)))
+      g2 = 0.d0
+      n  = 0
+      !
+      do mu = 1, nmodes
+        !
+        w_2 = sqrt(abs(w2(mu)))
+        !
+        if ( abs(w_2-w_1).lt.eps ) then
+           n = n + 1
+           g2 = g2 + epc(ibnd,jbnd,mu)*epc(ibnd,jbnd,mu)
+        endif
+        !
+      enddo 
+      !
+      g2 = g2 / float(n)
+      epc_sym (ibnd, jbnd, nu) = sqrt (g2)
+      !
+    enddo
+    !
+  enddo
+  enddo
+  epc = epc_sym
+  !
+  ! then the k electrons
+  !
+  do nu   = 1, nmodes
+  do jbnd = 1, nbnd
+    !
+    do ibnd = 1, nbnd
+      !
+      w_1 = et (ibnd, ikk)
+      g2 = 0.d0
+      n  = 0
+      !
+      do pbnd = 1, nbnd
+        !
+        w_2 = et(pbnd, ikk)
+        !
+        if ( abs(w_2-w_1).lt.eps ) then
+           n = n + 1
+           g2 = g2 + epc(pbnd,jbnd,nu)*epc(pbnd,jbnd,nu)
+        endif
+        !
+      enddo 
+      !
+      g2 = g2 / float(n)
+      epc_sym (ibnd, jbnd, nu) = sqrt (g2)
+      !
+    enddo
+    !
+  enddo
+  enddo
+  epc = epc_sym
+  !
+  ! and finally the k+q electrons
+  !
+  do nu   = 1, nmodes
+  do ibnd = 1, nbnd
+    !
+    do jbnd = 1, nbnd
+      !
+      w_1 = et (jbnd, ikq)
+      g2 = 0.d0
+      n  = 0
+      !
+      do pbnd = 1, nbnd
+        !
+        w_2 = et(pbnd, ikq)
+        !
+        if ( abs(w_2-w_1).lt.eps ) then
+           n = n + 1
+           g2 = g2 + epc(ibnd,pbnd,nu)*epc(ibnd,pbnd,nu)
+        endif
+        !
+      enddo 
+      !
+      g2 = g2 / float(n)
+      epc_sym (ibnd, jbnd, nu) = sqrt (g2)
+      !
+    enddo
+    !
+  enddo
+  enddo
+  epc = epc_sym
+  !
+  !if (my_pool_id.eq.0) then
+    !
+    do ibnd = 1, nbnd
+      do jbnd = 1, nbnd
+        do nu = 1, nmodes
+          !
+          if (w2(nu).gt.0.d0) then
+            w = sqrt( w2(nu))
+          else
+            w = sqrt(-w2(nu))
+          endif
+          !
+          write(stdout,'(3i5,4f15.6)') ibnd, jbnd, nu, &
+             ryd2ev * et (ibnd, ikk), ryd2ev * et (jbnd, ikq), &
+             ryd2mev * w, ryd2mev * epc(ibnd,jbnd,nu)
+          !
+        enddo
+      enddo
+    enddo
+    !
+  !endif
+  !
+  !
+  return
+end subroutine elphsum2
+
 !-----------------------------------------------------------------------
 SUBROUTINE elphsum_simple
   !-----------------------------------------------------------------------
diff -ru qe-6.7/PHonon/PH/phq_readin.f90 qe-6.7-elphsum2/PHonon/PH/phq_readin.f90
--- qe-6.7/PHonon/PH/phq_readin.f90.orig	2020-11-30 20:57:09.000000000 +0800
+++ qe-6.7/PHonon/PH/phq_readin.f90	2021-04-19 12:37:43.775999024 +0800
@@ -906,9 +906,9 @@
      CALL errore('phq_readin','phonon with arbitrary occupations not tested',1)
   !
   !YAMBO >
-  IF (elph .AND. .NOT.(lgauss .OR. ltetra) &
-      .AND. .NOT. (elph_yambo .OR. elph_ahc)) &
-          CALL errore ('phq_readin', 'Electron-phonon only for metals', 1)
+  !IF (elph .AND. .NOT.(lgauss .OR. ltetra) &
+  !    .AND. .NOT. (elph_yambo .OR. elph_ahc)) &
+  !        CALL errore ('phq_readin', 'Electron-phonon only for metals', 1)
   !YAMBO <
   IF (elph .AND. fildvscf.EQ.' ' .AND. .NOT. ldvscf_interpolate) &
       CALL errore ('phq_readin', 'El-ph needs a DeltaVscf file', 1)
diff -ru qe-6.7/PHonon/PH/symdyn_munu.f90 qe-6.7-elphsum2/PHonon/PH/symdyn_munu.f90
--- qe-6.7/PHonon/PH/symdyn_munu.f90.orig	2020-11-30 20:57:09.000000000 +0800
+++ qe-6.7/PHonon/PH/symdyn_munu.f90	2021-04-19 12:28:21.253935185 +0800
@@ -84,3 +84,107 @@
 
   return
 end subroutine symdyn_munu_new
+!
+!-----------------------------------------------------------------------
+subroutine symdyn_munu2 (dyn, u, xq, s, invs, rtau, irt, at, &
+     bg, nsymq, nat, irotmq, minus_q)
+  !-----------------------------------------------------------------------
+  !
+  !    This routine symmetrize the dynamical matrix written in the basis
+  !    of the modes
+  !
+  !
+!#include "f_defs.h"
+  USE kinds, only : DP
+  implicit none
+  integer :: nat, s (3, 3, 48), irt (48, nat), invs (48), &
+       nsymq, irotmq
+  ! input: the number of atoms
+  ! input: the symmetry matrices
+  ! input: the rotated of each atom
+  ! input: the small group of q
+  ! input: the inverse of each matrix
+  ! input: the order of the small gro
+  ! input: the symmetry q -> -q+G
+
+  real(kind=DP) :: xq (3), rtau (3, 48, nat), at (3, 3), bg (3, 3)
+  ! input: the coordinates of q
+  ! input: the R associated at each r
+  ! input: direct lattice vectors
+  ! input: reciprocal lattice vectors
+
+  logical :: minus_q
+  ! input: if true symmetry sends q->
+
+  complex(kind=DP) :: dyn (3 * nat, 3 * nat), u (3 * nat, 3 * nat)
+  ! inp/out: matrix to symmetrize
+  ! input: the patterns
+
+  integer :: i, j, icart, jcart, na, nb, mu, nu
+  ! counter on modes
+  ! counter on modes
+  ! counter on cartesian coordinates
+  ! counter on cartesian coordinates
+  ! counter on atoms
+  ! counter on atoms
+  ! counter on modes
+  ! counter on modes
+
+  complex(kind=DP) :: work, wrk (3, 3), phi (3, 3, nat, nat)
+  ! auxiliary variable
+  ! auxiliary variable
+  ! the dynamical matrix
+  !
+  ! First we transform in the cartesian coordinates
+  !
+  do i = 1, 3 * nat
+     na = (i - 1) / 3 + 1
+     icart = i - 3 * (na - 1)
+     do j = 1, 3 * nat
+        nb = (j - 1) / 3 + 1
+        jcart = j - 3 * (nb - 1)
+        work = (0.d0, 0.d0)
+        do mu = 1, 3 * nat
+           do nu = 1, 3 * nat
+              work = work + u (i, mu) * dyn (mu, nu) * conjg (u (j, nu) )
+           enddo
+        enddo
+        phi (icart, jcart, na, nb) = work
+     enddo
+  enddo
+  !
+!@  ! Then we transform to the crystal axis
+!@  !
+!@  do na = 1, nat
+!@     do nb = 1, nat
+!@        call trntnsc (phi (1, 1, na, nb), at, bg, - 1)
+!@     enddo
+!@  enddo
+!@  !
+!@  !   And we symmetrize in this basis
+!@  !
+!@  call symdynph_gq (xq, phi, s, invs, rtau, irt, irgq, nsymq, nat, &
+!@       irotmq, minus_q)
+!@  !
+!@  !  Back to cartesian coordinates
+!@  !
+!@  do na = 1, nat
+!@     do nb = 1, nat
+!@        call trntnsc (phi (1, 1, na, nb), at, bg, + 1)
+!@     enddo
+!@  enddo
+  !
+  !  rewrite the dynamical matrix on the array dyn with dimension 3nat x 3
+  !
+  do i = 1, 3 * nat
+     na = (i - 1) / 3 + 1
+     icart = i - 3 * (na - 1)
+     do j = 1, 3 * nat
+        nb = (j - 1) / 3 + 1
+        jcart = j - 3 * (nb - 1)
+        dyn (i, j) = phi (icart, jcart, na, nb)
+     enddo
+
+  enddo
+  return
+end subroutine symdyn_munu2
